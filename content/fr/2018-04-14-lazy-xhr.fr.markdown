---
slug: xhr-with-mutation-observer
date: 2018-04-13T13:20:31+01:00
title: "onappinstalled - for when an app is installed."
tags: ['pwa']
draft: true
description: "Use onappinstalled to detect when a progressive web app is installed."
---


Un peu en arrière, j'ai créé un script `[waitForElement](/waiting-for-an-element-to-be-created)` qui ... Je pensais être cool, mais il s'est avéré que je n'utilisais pas correctement Promises.








```javascript
function waitForElement(selector, onElement) {
  const elements = document.querySelectorAll(selector);

  if (elements) {
    onElement(Array.prototype.slice.call(elements));
  }

  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      let nodes = Array.prototype.slice.call(mutation.addedNodes);
      let matchedNodes = [];
      for (let node of nodes) {
        if (node.matches && node.nodeType == 1 && node.matches(selector)) {
          matchedNodes.push(node);
        }
      }
      onElement(matchedNodes);
    });
  });

  observer.observe(document.documentElement, {childList: true, subtree: true});
}
```





```javascript
waitForElement('section div[data-url]', columns => {
  const itemTemplate = document.getElementById('itemTemplate');
  for (const column of columns) {
    const feedUrl = column.dataset['url'];
    const url = `/proxy?url=${encodeURIComponent(feedUrl)}`;
    fetch(url)
        .then(feedResponse => {
          const response = feedResponse.clone();
          if ('caches' in window) {
            return caches.open('data').then(cache => {
              if (cache) {
                cache.put(url, response);
              }
              return feedResponse.text();
            });
          }
          return feedResponse.text();
        })
        .then(feedText => convertFeedItemsToJSON(feedText))
        .then(items => items.reverse())
        .then(items => items.filter(item => !document.getElementById(item.guid)))
        .then(items => items.map(item => applyTemplate(itemTemplate.cloneNode(true), item)))
        .then(items => items.forEach(item => column.insertBefore(item, column.firstChild)));
  }
});
```