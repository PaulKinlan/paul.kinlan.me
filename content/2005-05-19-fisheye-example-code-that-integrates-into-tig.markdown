---
slug: fisheye-example-code-that-integrates-into-tig
date: 2005-05-19
 
title: FishEye Example Code That Integrates into Tiger Imaging
published: true
---
Here we go I have updated my code, i.e added some comments to it... It produces a fish eye effect described by <a href="http://www.jasonwaltman.com/thesis/filter-fisheye.html">Jason Waltman</a> based on the paper:<blockquote>
<p>"Devernay, F., and O. Faugeras. <em>Straight Lines Have to Be Straight</em>. 2001. 13 March 2001. <a href="http://devernay.free.fr/publis/distcalib-mva.pdf">http://devernay.free.fr/publis/distcalib-mva.pdf</a>.</p>
<p align="left"><strong><span style="FONT-SIZE: 0.75em; FONT-FAMILY: Times New Roman;">Abstract.</span></strong></p>
<p align="left"><span style="FONT-SIZE: 0.75em; FONT-FAMILY: Times New Roman;">Most algorithms in 3D computer vision rely on the pinhole camera model because of its simplicity, whereas video optics, especially low-cost wide-angle or fish-eye lenses, generate a lot of non-linear distortion which can be critical. To find the distortion parameters of a camera, we use the following fundamental property: a camera follows the pinhole model if and only if the projection of every line in space onto the camera is a line. Consequently, if we find the transformation on the video image so that every line in space is viewed in the transformed image as a line, then we know how to remove the distortion from the image. The algorithm consists of first doing edge extraction on a possibly distorted video sequence, then doing polygonal approximation with a large tolerance on these edges to extract possible lines from the sequence, and then finding the parameters of our distortion model that best transform these edges to segments. Results are presented on real video images, compared with distortion calibration obtained by a full camera calibration method which uses a calibration grid.</span></p>
</blockquote>To be fair I have only glanced at the paper because I already had the algorithm to do the fish eye effect I wanted, but it seems to go more in depth.  Specifically it seems to discuss methods to determine if an image has been distored, and how to correct that image into a normal <a href="http://en.wikipedia.org/wiki/Pinhole_camera">pin hole camera model</a>  (i.e a normal looking image like those used to view an eclipse).<p />I have not noticed any additional copyright information on reproducing the abstract above, nor for examining <a href="http://www.jasonwaltman.com/">Jason Waltmans</a> works.<p />Anyway click <a href="http://www.kinlan.co.uk/source_samples/FishEye.cs">Here</a> for the cs<p /><br />

