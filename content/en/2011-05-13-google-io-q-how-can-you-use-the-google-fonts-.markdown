---
slug: google-io-q-how-can-you-use-the-google-fonts-
date: 2011-05-13
tags: ["google"]
title: "Google IO Q: How can you use the Google Fonts API on mobile while optimizing performance?"
---
We had an <a href="http://goo.gl/mod/omjx">awesome question by Pamela Fox</a> for our Google IO talk - <a href="http://io2011-zerotohero.appspot.com/index.html#1">Mobile Web Development: Zero to Hero</a>.  In summary the question is <br /> &quot;How can you use the Google Fonts API on mobile while optimizing performance? (Both visual + # of requests)&quot; - which is interesting because on the Desktop it is not something you particularly worry about, but in mobile it is one of the most important things you need to consider - bandwidth, latency and visual aesthetics.<p /><div>From the Aesthetic point of view, we specifically chose two fonts that had been designed to work on the mobile context, that is Droid Sans and Lato.  So they looked pretty nice.</div><p /><div>On the number of requests front, we used App Cache.  If you look at our <a href="https://github.com/PaulKinlan/ioreader">source code for the project</a>, you will see that the <a href="https://github.com/PaulKinlan/ioreader/raw/master/server/templates/app.cache">App Cache</a> includes 3 remote objects, namely the request for the CSS of the fonts and then the two physical fonts.  The first load of the application will download 3 files, but all subsequent later runs of the app will use the data from the App Cache and thus will be blazingly fast.  A caveat to mention is that the number of files requested is directly proportional to the number of fonts in your CSS src.</div> <p /><div>To get the true URL of the fonts isn&#39;t amazingly easy, the Web Font API is designed to abstract away some of the detail.  We determined the URL of the fonts by delving in to the response of the request to the CSS file.</div> <p /><div>The AppCache and Web Font API work well together because the physical font file is determined at the time of download and since we won&#39;t change browser we know we are getting the correct font file and keeping it permanently cached (until the next App Cache update).</div> <p /><div>On the subject of ensuring that the file size is a small as possible, it is possible to <a href="http://code.google.com/apis/webfonts/docs/getting_started.html#Optimizing_Requests">download a subset of the font file</a> by specify only the characters that you need for your page.  We didn&#39;t need this level of control purely because it is possible that a set of News articles will require the use of every single character in a given font (or a very large portion at least).</div> <p /><div>So, in summary that is how we optimised our font usage for the mobile context.</div>

