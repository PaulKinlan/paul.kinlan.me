---
slug: microformat-net
date: 2007-09-08
 
title: Microformat.net
published: true
---
<p>I would like to take this opportunity to announce that I have created a usable [although beta] release of a generic Microformat parser for .Net.  I don't know of any other frameworks that easily allow you to find Microformats in an html/XML stream that are specifically built for .Net, so I believe that this project is a first (and hopefully a de-facto choice in time to come).</p> <p>The project can be found on Codeplex at <a href="http://www.codeplex.com/microformat">http://www.codeplex.com/microformat</a>.  The current release is Iteration 3.  </p><p>The parser is stream based and uses an application configuration (see below for an example) to define the how the parser should parse the html/XML stream.  This flexible configuration means that if a spec changes for a Microformat or a new one is introduced then no code needs to be changed in the framework to let users of the framework see the changed data. </p><div class="CodeRay">
  <div class="code"><pre>&lt;configuration&gt;  &lt;configSections&gt;    &lt;section name=&quot;MicroformatsSection&quot; type=&quot;Microformats.ConfigurationSections.MicroformatConfigSection, Microformat.net&quot;/&gt;  &lt;/configSections&gt;  &lt;MicroformatsSection&gt;    &lt;Microformats&gt;      &lt;Microformat type=&quot;rel-tag&quot; rootType=&quot;rel&quot; root=&quot;tag&quot; dataType=&quot;System.Uri&quot; /&gt;      &lt;Microformat type=&quot;hCard&quot; rootType=&quot;class&quot; root=&quot;vcard&quot; dataType=&quot;System.String&quot;&gt;        &lt;Fields&gt;          &lt;Field name=&quot;fn&quot; dataType=&quot;System.String&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;url&quot; dataType=&quot;System.Uri&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;email&quot; dataType=&quot;System.Uri&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;adr&quot; dataType=&quot;Microformat&quot; plurality=&quot;Singular&quot;/&gt;        &lt;/Fields&gt;      &lt;/Microformat&gt;      &lt;Microformat type=&quot;adr&quot; rootType=&quot;class&quot; root=&quot;adr&quot; dataType=&quot;System.String&quot;&gt;        &lt;Fields&gt;          &lt;Field name=&quot;post-office-box&quot; dataType=&quot;System.String&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;extended-address&quot; dataType=&quot;System.String&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;street-address&quot; dataType=&quot;System.String&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;locality&quot; dataType=&quot;System.String&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;region&quot; dataType=&quot;System.String&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;postal-code&quot; dataType=&quot;System.String&quot; plurality=&quot;Singular&quot;/&gt;          &lt;Field name=&quot;country-name&quot; dataType=&quot;System.String&quot; plurality=&quot;Singular&quot;/&gt;        &lt;/Fields&gt;      &lt;/Microformat&gt;    &lt;/Microformats&gt;  &lt;/MicroformatsSection&gt;</pre></div>
</div>
<a href="http://11011.net/software/vspaste"></a><br /><p>The above configuration says that the following Microformats are to be searched for: rel-tag, hCard and adr.  Each Microformat configuration can also be nested (see the hCard spec that allows an adr to be nested inside itself).  This saves on duplicating configuration information.  (Unfortunately a circular reference in the configuration can be defined and plurality of elements is not implemented.  This will be fixed soon).  Currently in this configuration not all of the hCard spec is defined (this was done for simplicity of me showing you how the config works), obviously this means that any parts of a Microformat that you are not interested in you won't see in the output of the framework. <br /></p><p>The code that follows shows how easy it is to use this framework:</p><div class="CodeRay">
  <div class="code"><pre>using (TextReader ms = new StringReader(@&quot;&lt;html&gt;&lt;body&gt;&lt;div class=&quot;&quot;vcard author&quot;&quot;&gt; <a class="">Paul Kinlan</a> <a class="">paul.kinlan@gmail.com</a> &lt;div class=&quot;&quot;adr&quot;&quot;&gt;  &lt;span class=&quot;&quot;locality&quot;&quot;&gt;Liverpool&lt;/span&gt;,&lt;span class=&quot;&quot;region&quot;&quot;&gt;Merseyside&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;<a href="" />Test Tag</a>&lt;/body&gt;&lt;/html&gt;&quot;))            {                using (Microformats.Readers.MicroformatReader mr = new Microformats.Readers.MicroformatReader(ms))                {                    Microformat m = null;                    while(( m = mr.Read()) != null)                    {                        Console.Out.Write(&quot;Found Microformat: &quot; + m.Name + &quot;. Machine Value:&quot; + m.MachineValue + &quot;\n&quot;);                        foreach (IField f in m.Fields)                        {                            Console.Out.WriteLine(&quot;\t&quot; + f.Name + &quot;: &quot; + f.MachineValue);                        }                    }                                    }            }</pre></div>
</div>
<a href="http://11011.net/software/vspaste"></a><br /><p>The first line, simply converts makes a TextReader object that can be used to pass into the MicroformatReader object.  Once the stream has been presented to the framework, then it is as simple as calling mr.Read to iterate to across all the valid Microformats in the document.  The Read() method returns fully constructed Microformat objects that can be examined and used directly in your programs.<br /></p><p>I still have a lot of work to do, however it appears (to me at least) to be quite flexible.  I would greatly appreciate any comments and feedback and if you use the framework I would love to hear about it.  If anyone is interested in joining the project let me know. <p /></p><div class="wlWriterSmartContent" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px;">Topicala Tags: <a href="http://www.topicala.com/tag/c#" rel="tag">c#</a> [<a href="http://www.topicala.com/opml/c#.opml">OPML</a>], <a href="http://www.topicala.com/tag/microformat" rel="tag">microformat</a> [<a href="http://www.topicala.com/opml/microformat.opml">OPML</a>], <a href="http://www.topicala.com/tag/microformats" rel="tag">microformats</a> [<a href="http://www.topicala.com/opml/microformats.opml">OPML</a>], <a href="http://www.topicala.com/tag/.net" rel="tag">.net</a> [<a href="http://www.topicala.com/opml/.net.opml">OPML</a>], <a href="http://www.topicala.com/tag/framework" rel="tag">framework</a> [<a href="http://www.topicala.com/opml/framework.opml">OPML</a>], <a href="http://www.topicala.com/tag/api" rel="tag">api</a> [<a href="http://www.topicala.com/opml/api.opml">OPML</a>], <a href="http://www.topicala.com/tag/codeplex" rel="tag">codeplex</a> [<a href="http://www.topicala.com/opml/codeplex.opml">OPML</a>]</div>

