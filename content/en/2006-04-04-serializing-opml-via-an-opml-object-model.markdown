---
slug: serializing-opml-via-an-opml-object-model
date: 2006-04-04
 
title: Serializing OPML via an OPML Object Model
published: true
---
As I promised in a previous post I have uploaded the <a href="http://www.kinlan.co.uk/sample_sources/Opml.cs">OPML source code</a>.<p />The code is a basic Main() which instantiates the OPML object, serializes it and then deserializes it (to kind of prove that it works).<p />The Object model isn't very clean, infact it is pretty hackey!  But anyway it is here now :)<br /><code><br />using System;<br />using System.IO;<br />using System.Text;<br />using System.Xml.Serialization;<br />using OPML.OPML;<br /><br />namespace OPML<br />{<br /> /// <br /> /// Summary description for Class1.<br /> /// <br /> internal class Class1<br /> {<br />  /// <br />  /// The main entry point for the application.<br />  /// <br />  [STAThread]<br />  private static void Main(string[] args)<br />  {<br />   Opml o = new Opml();<br />   o.body = new OpmlBody();<br />   o.body.outline = new OpmlOutline[1];<br />   o.body.outline[0] = new OpmlOutline("Yo Yo");<br />   o.body.outline[0].title = "Test";<br />   o.body.outline[0].Url = "uasd";<br />   o.body.outline[0].Type = "link";<br />   o.body.outline[0].htmlUrl = "www.kinlan.co.uk";<br /><br />   XmlSerializer xs = new XmlSerializer(typeof (Opml));<br />   StringBuilder sb = new StringBuilder();<br />   <br />   TextWriter sr = new StringWriter(sb);<br /><br />   xs.Serialize(sr, o);<br /><br />   sr.Close();<br /><br />   Console.Write(sb.ToString());<br />   Console.Read();<br />   <br />   TextReader tr = new StringReader(sb.ToString());<br />   <br />   Opml o2 = (Opml) xs.Deserialize(tr);<br />   <br />  }<br /> }<br /><br /> namespace OPML<br /> {<br />  [XmlRoot("opml")]<br />  public class Opml<br />  {<br />   public OpmlHead head;<br />   public OpmlBody body;<br />   <br />   /// <br />   /// Initializes a new instance of the  class.<br />   /// <br />   public Opml()<br />   {<br />    body = new OpmlBody();<br />    head = new OpmlHead();<br />   }<br />  }<br /><br />  [XmlRoot("body")]<br />  public class OpmlBody<br />  {<br />   [XmlElement("outline")] public OpmlOutline[] outline;<br />  }<br /><br />  [XmlRoot("head")]<br />  public class OpmlHead<br />  {<br />   [XmlAttribute] public string title;<br />   [XmlAttribute] public string dateCreated;<br />   [XmlAttribute] public string dateModified;<br />   [XmlAttribute] public string ownerName;<br />   [XmlAttribute] public string ownerEmail;<br />   [XmlAttribute] public string ownerId;<br />   [XmlAttribute] public string docs;<br />   [XmlAttribute] public string expansionState;<br />   [XmlAttribute] public string vertScrollState;<br />   [XmlAttribute] public string windowTop;<br />   [XmlAttribute] public string windowLeft;<br />   [XmlAttribute] public string windowBottom;<br />   [XmlAttribute] public string windowRight;<br />  }<br /><br />  [XmlRoot("outline")]<br />  public class OpmlOutline<br />  {<br />   private string _text;<br />   [XmlAttribute] public string title;<br />   private string _type;<br />   private string _url; // when type == link, this must not be null<br />   [XmlAttribute] public string description;<br />   [XmlAttribute] public string xmlUrl;<br />   [XmlAttribute] public string htmlUrl;<br />   [XmlAttribute] public string language;<br />   [XmlElement("outline")] public OpmlOutline[] outline;<br /><br />   /// <br />   /// Initializes a new instance of the  class.<br />   /// <br />   public OpmlOutline()<br />   {<br />    //Text = inText; //Use the property so that it can check the values.<br />   }<br />   <br />   /// <br />   /// Initializes a new instance of the  class.<br />   /// <br />   /// <param name="inText" />The in text.<br />   public OpmlOutline(string inText)<br />   {<br />    Text = inText; //Use the property so that it can check the values.<br />   }<br /><br />   /// <br />   /// Gets or sets the text.<br />   /// <br />   /// The text.<br />   [XmlAttribute("text")]<br />   public String Text<br />   {<br />    get { return _text; }<br />    set<br />    {<br />     if(value == null)<br />     {<br />      throw new ArgumentNullException("Outline Text must not be null");<br />     }<br />     <br />     if(value.Length == 0)<br />     {<br />      throw new ArgumentException("Outline Text must not be blank");<br />     }<br />     <br />     _text = value;<br />    }<br />   }<br />   <br />   [XmlAttribute("type")]<br />   public String Type<br />   {<br />    get { return _type; }<br />    set<br />    {<br />     if(value == null)<br />     {<br />      throw new ArgumentNullException("Type must not be null");<br />     }<br />     <br />     if(value.Length == 0)<br />     {<br />      throw new ArgumentException("Type must not be blank");<br />     }<br />     <br />     if(value.ToUpper() == "LINK")<br />     {<br />      if(Url == null)<br />      {<br />       throw new ArgumentException("Url must not be Null when Type=Link");<br />      }<br />      else if (Url.Length == 0)<br />      {<br />       throw new ArgumentException("Url must not be blank when Type=Link");<br />      }<br />     }<br />     _type = value;<br />    }<br />   }<br /><br />   [XmlAttribute]<br />   public string Url<br />   {<br />    get { return _url; }<br />    set<br />    {<br />     if(_type != null)<br />     {<br />      if(_type.ToUpper() == "LINK" &amp;&amp; value == null)<br />      {<br />       throw new ArgumentException("Url must not be Null when Type=Link");<br />      }<br />      else if (value.Length == 0)<br />      {<br />       throw new ArgumentException("Url must not be blank when Type=Link");<br />      }<br />      else<br />      {<br />       _url = value;<br />      }<br />     }<br />     else<br />     {<br />      _url = value;<br />     }<br />    }<br />   }<br />  }<br /> }<br />}</code><br />

