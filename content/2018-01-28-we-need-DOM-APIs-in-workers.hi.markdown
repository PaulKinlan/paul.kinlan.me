---
slug: we-need-DOM-APIs-in-workers
date: 2018-01-28T13:20:31+01:00
title: "We need DOM APIs in Workers"
description: "If we are to build HTML in Workers then we need some 'DOM' in them."
tags: ['DOM', 'javascript']
---


मुझे अधिकांश लोगों की तुलना में विभिन्न कारणों से श्रमिकों में डोम एपीआई की आवश्यकता है। बहुत से लोग कामकाज में डीओएम को मुख्य धागे को ब्लॉक न करने के लिए डीओएम को अपडेट करना चाहते हैं। मुझे इसकी आवश्यकता है ताकि मैं HTML आउटपुट के लिए XML डेटा _and_ को कुशलतापूर्वक पार्सर और हेरफेर कर सकूं, और मुझे संदेह है कि कई अन्य लोग ऐसा करते हैं।

एक [हालिया परियोजना](https://webgdedeck.com/) में, मैं सर्वर, सेवा कर्मचारी और ग्राहक के बीच जितना संभव हो उतना तर्क साझा करना चाहता था। यह प्रोजेक्ट अनिवार्य रूप से एक साधारण आरएसएस फ़ीड रीडर है, यह आरएसएस फ़ीड लेता है, डेटा को पार करता है और उन्हें कॉलम के एक अच्छे सेट (जैसे TweetDeck) में विलय करता है, और एक विलय सूची भी देता है।

यह परियोजना आरएसएस फ़ीड डेटा के साथ तीन स्थानों पर काम करती है:

1. क्लाइंट पर & mdash; जब पृष्ठ पहली बार लोड होता है, तो AJAX आरएसएस फ़ीड डेटा को प्रॉक्सी सेवा से अनुरोध करता है जो मैं चलाता हूं, और फिर क्लाइंट में इसे प्रस्तुत करने से पहले इसे 'window.caches` ऑब्जेक्ट में कच्चे डेटा को कैश करता है। 2. सेवा कार्यकर्ता में & mdash; 1. जब मुख्य पृष्ठ लोड होता है और सेवा कार्यकर्ता स्थापित होता है, तो सेवा कर्मचारी शैल लोड करता है और आरएसएस फ़ीड डेटा में विलीन हो जाता है ताकि दूसरे लोड पर कोई AJAX अनुरोध करने की आवश्यकता न हो - इस प्रकार समय को इंटरैक्टिव समय पर उच्च रखा जाए। 1. जब ग्राहक से प्रॉक्सी का अनुरोध किया जाता है, तो सेवा कार्यकर्ता स्थापित होने पर, अनुरोध को रोक देगा और `window.caches` से डेटा की सेवा करेगा। यह साइट को ऑफ़लाइन काम करने की अनुमति देता है। 3. सर्वर पर & mdash; जब पृष्ठ का अनुरोध किया जाता है, तो हम सर्वर पर कैश किए गए कुछ डेटा ले सकते हैं और इसे सीधे उस प्रतिक्रिया में विलय कर सकते हैं जिसे हम ग्राहक को भेजते हैं। सीधे सर्वर से कुछ सामग्री को प्रस्तुत करके हम पहले लोड पर एक स्थिर व्यूपोर्ट प्राप्त कर सकते हैं जो सामान्य रूप से मोबाइल (और स्पीड इंडेक्स) पर धीमे कनेक्शन के लिए महत्वपूर्ण है।

प्रत्येक उदाहरण में एक साधारण प्रक्रिया होती है जो आरएसएस डेटा और मानचित्र को JSON ऑब्जेक्ट में ले जाती है जिसे मैं HTML उत्पन्न करने के लिए टेम्पलेट पर लागू कर सकता हूं। क्लाइंट, सर्वर और सेवा कार्यकर्ता में एक टेम्पलेट और एकीकृत तर्क रखना एक महत्वपूर्ण आवश्यकता थी। टेम्पलेट्स के एक सेट को बनाए रखने का मतलब है कि इनपुट डेटा को उन सभी स्थानों पर सुसंगत होना चाहिए जो डेटा प्रस्तुत करेंगे।

चूंकि मैं प्रॉक्सी सर्वर चलाता हूं, एक साधारण समाधान है: बस सभी आरएसएस फ़ीड को सर्वर पर एक सतत JSON फॉर्म में बदलें। मैंने इसे छूट दी क्योंकि:

* डेटा ट्रांसफॉर्म प्रक्रिया के लिए गहन हो सकता है। * सेवा पर साझा बोझ को कम करने के लिए ग्राहक पर डेटा ट्रांसफॉर्म किया जा सकता है * सबसे महत्वपूर्ण बात यह है कि यदि कोई आरएसएस फ़ीड https पर है और सीओआरएस का समर्थन करता है तो प्रॉक्सी सेवा के माध्यम से जाने की आवश्यकता नहीं है। यह वह राज्य है जिसे मैं भविष्य में रखना चाहता हूं क्योंकि यह फीड रीडर को उस सामग्री को प्रस्तुत करने की अनुमति देता है जिसके लिए उपयोगकर्ता के प्रमाणीकरण की आवश्यकता हो सकती है।

क्लाइंट पर डेटा प्रोसेस करना संभव है (और मेरे मामले में वांछित) क्योंकि ब्राउज़र में थोड़ा उपयोग किया जाने वाला एपीआई है जिसे 'डोमपार्सर' कहा जाता है। डोमपार्सर जैसा नाम बताता है: कच्चे एक्सएमएल और एचटीएमएल का एक पार्स जो एक डोम बनाता है। एक बार आपके पास डोम हो जाने के बाद, आप इसके साथ कुछ भी कर सकते हैं कि आप सामान्य डीओएम (एपेंड चाइल्ड, गेट एट्रिब्यूट इत्यादि) के साथ करेंगे।


```javascript
let parser = new DOMParser();
let dom = parser.parseFromString('<a><b>hello</b></a>', 'application/xml');
let bString = dom.querySelector('b').textContent;
```


बहुत ही सरल चीजें और मैं इसका उपयोग आरएसएस डेटा को एक साधारण JSON संरचना में बदलने के लिए करता हूं ताकि मैं इसे एक टेम्पलेटिंग फ़ंक्शन में पास कर सकूं ([यदि आप कोड देखने में रूचि रखते हैं तो यह यहां है](https://github.com/ PaulKinlan / webgde-डेक / ब्लॉब / मास्टर / src / सार्वजनिक / लिपियों / डेटा / common.js # L98)।)

यह क्लाइंट में पूरी तरह से काम करता है, लेकिन वेब श्रमिकों, सेवा कर्मचारियों, और न ही किसी भी मूल डोम सर्वर में कोई डोम नहीं है।

सौभाग्य से एक एनपीएम पुस्तकालय है जो हर जगह काम करता है। [`xml-dom`](https://www.npmjs.com/package/xmldom) कुछ स्तर 3 सुविधाओं के साथ डब्ल्यू 3 सी डोम का स्तर 2 अनुपालन कार्यान्वयन है, और यह अपेक्षा के अनुसार काफी काम करता है। यह दुनिया का अंत नहीं है, लेकिन ऐसा लगता है कि ब्राउजर ने पहले से ही बनाया है, कुछ ऐसा करने के लिए 64kb जेएस आयात करना मूर्खतापूर्ण लगता है।

मैं केवल श्रमिकों में डीओएम एपीआई के लिए 'वीडीओएम' उपयोग-मामला देखता हूं, और मुझे लगता है कि यह एक महत्वपूर्ण उपयोग-मामला है, मुझे लगता है कि यह एक और महत्वपूर्ण उपयोग के मामले में आता है: मुख्य थ्रेड से डेटा मैनिपुलेशन। तथ्य यह है कि हम पॉलीफिल का एक बड़ा हिस्सा आयात किए बिना HTML और XML दस्तावेज़ों (लगभग हर ऐप को करना है) को संसाधित करने के लिए श्रमिकों का उपयोग नहीं कर सकते हैं जो मूल कार्यान्वयन के समान गति से नहीं चलेंगे और हम बनाए रखने के लिए ओएसएस योगदानकर्ताओं पर भरोसा करना कुछ ऐसा लगता है जिसे ठीक किया जाना चाहिए।

'Xml-dom` बनाए रखने वाले लोगों के लिए धन्यवाद। हीरोज काम करते हैं।